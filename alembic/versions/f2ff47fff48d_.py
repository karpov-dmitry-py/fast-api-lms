"""empty message

Revision ID: f2ff47fff48d
Revises: 
Create Date: 2022-11-05 17:12:36.687515

"""

import os.path
import json

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f2ff47fff48d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    user_role_enum = postgresql.ENUM('teacher', 'student', name='role', create_type=False)
    user_role_enum.create(op.get_bind())

    user_table = op.create_table('user',
                                 sa.Column('created_at', sa.DateTime(), nullable=False),
                                 sa.Column('updated_at', sa.DateTime(), nullable=False),
                                 sa.Column('id', sa.Integer(), nullable=False),
                                 sa.Column('email', sa.String(length=100), nullable=False),
                                 sa.PrimaryKeyConstraint('id')
                                 )
    op.add_column(
        'user',
        sa.Column('role', sa.Enum('teacher', 'student', name='role'), nullable=True),
    )

    with open(os.path.join(os.path.dirname(__file__), "../src/users.json")) as f:
        users_data = f.read()

    op.bulk_insert(user_table, json.loads(users_data))

    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('course',
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_course_id'), 'course', ['id'], unique=False)
    op.create_table('profile',
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('first_name', sa.String(length=50), nullable=False),
                    sa.Column('last_name', sa.String(length=50), nullable=False),
                    sa.Column('bio', sa.Text(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_profile_id'), 'profile', ['id'], unique=False)
    op.create_table('section',
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('course_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_section_id'), 'section', ['id'], unique=False)
    op.create_table('student_course',
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('student_id', sa.Integer(), nullable=False),
                    sa.Column('course_id', sa.Integer(), nullable=False),
                    sa.Column('completed', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
                    sa.ForeignKeyConstraint(['student_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_student_course_id'), 'student_course', ['id'], unique=False)
    op.create_table('content_block',
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('url', sqlalchemy_utils.types.url.URLType(), nullable=True),
                    sa.Column('content', sa.Text(), nullable=True),
                    sa.Column('section_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    content_block_type_enum = postgresql.ENUM('lesson', 'quiz', 'assignment', name='contenttype', create_type=False)
    content_block_type_enum.create(op.get_bind())
    op.add_column(
        'content_block',
        sa.Column('type', sa.Enum('lesson', 'quiz', 'assignment', name='contenttype'), nullable=True),
    )

    op.create_index(op.f('ix_content_block_id'), 'content_block', ['id'], unique=False)
    op.create_table('completed_content_block',
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('student_id', sa.Integer(), nullable=False),
                    sa.Column('content_block_id', sa.Integer(), nullable=False),
                    sa.Column('url', sqlalchemy_utils.types.url.URLType(), nullable=True),
                    sa.Column('feedback', sa.Text(), nullable=True),
                    sa.Column('grade', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['content_block_id'], ['content_block.id'], ),
                    sa.ForeignKeyConstraint(['student_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_completed_content_block_id'), 'completed_content_block', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_completed_content_block_id'), table_name='completed_content_block')
    op.drop_table('completed_content_block')
    op.drop_index(op.f('ix_content_block_id'), table_name='content_block')
    op.drop_table('content_block')
    op.drop_index(op.f('ix_student_course_id'), table_name='student_course')
    op.drop_table('student_course')
    op.drop_index(op.f('ix_section_id'), table_name='section')
    op.drop_table('section')
    op.drop_index(op.f('ix_profile_id'), table_name='profile')
    op.drop_table('profile')
    op.drop_index(op.f('ix_course_id'), table_name='course')
    op.drop_table('course')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.execute("DROP TYPE role;")
    op.execute("DROP TYPE contenttype;")
    # ### end Alembic commands ###
